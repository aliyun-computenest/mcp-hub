import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { Card, Button, message, Input } from 'antd';
import { CopyOutlined, LinkOutlined } from '@ant-design/icons';
import './index.css';

const MCPDetail = () => {
  const { name } = useParams();
  const [mcpData, setMcpData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchMCPDetail = async () => {
      try {
        // Ê®°ÊãüAPIË∞ÉÁî®
        const mockData = {
          name: 'Context7',
          createTime: '2025.04.29 Êõ¥Êñ∞',
          description: 'Context7 ÊòØÊé•‰ªéÊ∫êÁ†Å‰∏≠ÊèêÂèñÁúüÂÆûÂèØÁî®ÁöÑ‰ª£Á†ÅÁ§∫‰æã„ÄÅÁâπÂÆöÁâàÊú¨ÁöÑÊñáÊ°£ÂíåÁ§∫‰æã„ÄÇ',
          icon: 'üìö',
          sourceUrl: 'https://github.com/upstash/context7',
          features: [
            'Ëé∑ÂèñÊúÄÊñ∞„ÄÅÁâàÊú¨ÁâπÂÆöÁöÑÊñáÊ°£',
            '‰ªéÊ∫êÁ†Å‰∏≠ÊèêÂèñÁúüÂÆûÂèØÁî®ÁöÑ‰ª£Á†ÅÁ§∫‰æã',
            'Êèê‰æõÁÆÄÊ¥Å„ÄÅÁõ∏ÂÖ≥ÁöÑ‰ø°ÊÅØÔºåÊó†ÂÜó‰ΩôÂÜÖÂÆπ',
            'ÊîØÊåÅ‰∏™‰∫∫ÂÖçË¥π‰ΩøÁî®',
            '‰∏éMCPÊúçÂä°Âô®ÂíåÂ∑•ÂÖ∑ÈõÜÊàê'
          ],
          sseUrl: 'https://mcp.higrass.ai/mcp-context7/cmcBokvzeN03mOv01lab331vm/sse'
        };

        await new Promise(resolve => setTimeout(resolve, 1000));
        setMcpData(mockData);
      } catch (error) {
        message.error('Ëé∑Âèñ MCP ËØ¶ÊÉÖÂ§±Ë¥•');
        console.error('Error fetching MCP detail:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchMCPDetail();
  }, [name]);

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text).then(() => {
      message.success('Â§çÂà∂ÊàêÂäü');
    }).catch(() => {
      message.error('Â§çÂà∂Â§±Ë¥•');
    });
  };

  if (loading || !mcpData) {
    return <div className="loading">Âä†ËΩΩ‰∏≠...</div>;
  }

  const configExample = `{
  "mcpServers": {
    "mcp-context7": {
      "url": "${mcpData.sseUrl}"
    }
  }
}`;

  return (
    <div className="mcp-detail-container">
      <div className="detail-header">
        <div className="header-icon">{mcpData.icon}</div>
        <div className="header-content">
          <h1>{mcpData.name} MCP Server</h1>
          <p className="update-time">{mcpData.createTime}</p>
        </div>
      </div>

      <div className="detail-content">
        <div className="overview-section">
          <div className="overview-left">
            <Card title="ÂäüËÉΩ" className="feature-card">
              <ul className="feature-list">
                {mcpData.features.map((feature, index) => (
                  <li key={index}>{feature}</li>
                ))}
              </ul>
            </Card>
            
            <Card title="Ê∫êÁ†ÅÂú∞ÂùÄ" className="source-card">
              <a href={mcpData.sourceUrl} target="_blank" rel="noopener noreferrer" className="source-link">
                <LinkOutlined /> {mcpData.sourceUrl}
              </a>
            </Card>
          </div>

          <div className="overview-right">
            <Card title="‰ΩøÁî® URL ËøûÊé• MCP Server" className="usage-card">
              <div className="step-section">
                <h4>ÈÄöËøá SSE ËÆøÈóÆ URL</h4>
                <div className="code-block">
                  <Input.TextArea 
                    value={configExample}
                    readOnly 
                    autoSize={{ minRows: 8 }}
                  />
                  <Button 
                    icon={<CopyOutlined />} 
                    onClick={() => copyToClipboard(configExample)}
                  >
                    Â§çÂà∂
                  </Button>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MCPDetail;
